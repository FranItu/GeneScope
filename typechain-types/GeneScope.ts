/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace GeneScope {
  export type DataClaimStruct = {
    owner: AddressLike;
    ipfsHash: string;
    scope: BigNumberish;
    validUntil: BigNumberish;
    tags: string[];
  };

  export type DataClaimStructOutput = [
    owner: string,
    ipfsHash: string,
    scope: bigint,
    validUntil: bigint,
    tags: string[]
  ] & {
    owner: string;
    ipfsHash: string;
    scope: bigint;
    validUntil: bigint;
    tags: string[];
  };
}

export interface GeneScopeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimCount"
      | "claims"
      | "createClaim"
      | "deleteClaim"
      | "getClaim"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ClaimCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "claimCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claimCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
}

export namespace ClaimCreatedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    owner: AddressLike,
    ipfsHash: string,
    scope: BigNumberish,
    validUntil: BigNumberish,
    tags: string[]
  ];
  export type OutputTuple = [
    claimId: bigint,
    owner: string,
    ipfsHash: string,
    scope: bigint,
    validUntil: bigint,
    tags: string[]
  ];
  export interface OutputObject {
    claimId: bigint;
    owner: string;
    ipfsHash: string;
    scope: bigint;
    validUntil: bigint;
    tags: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GeneScope extends BaseContract {
  connect(runner?: ContractRunner | null): GeneScope;
  waitForDeployment(): Promise<this>;

  interface: GeneScopeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimCount: TypedContractMethod<[], [bigint], "view">;

  claims: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        owner: string;
        ipfsHash: string;
        scope: bigint;
        validUntil: bigint;
      }
    ],
    "view"
  >;

  createClaim: TypedContractMethod<
    [
      _ipfsHash: string,
      _scope: BigNumberish,
      _validUntil: BigNumberish,
      _tags: string[]
    ],
    [void],
    "nonpayable"
  >;

  deleteClaim: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getClaim: TypedContractMethod<
    [_id: BigNumberish],
    [GeneScope.DataClaimStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        owner: string;
        ipfsHash: string;
        scope: bigint;
        validUntil: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createClaim"
  ): TypedContractMethod<
    [
      _ipfsHash: string,
      _scope: BigNumberish,
      _validUntil: BigNumberish,
      _tags: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteClaim"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [GeneScope.DataClaimStructOutput],
    "view"
  >;

  getEvent(
    key: "ClaimCreated"
  ): TypedContractEvent<
    ClaimCreatedEvent.InputTuple,
    ClaimCreatedEvent.OutputTuple,
    ClaimCreatedEvent.OutputObject
  >;

  filters: {
    "ClaimCreated(uint256,address,string,uint8,uint256,string[])": TypedContractEvent<
      ClaimCreatedEvent.InputTuple,
      ClaimCreatedEvent.OutputTuple,
      ClaimCreatedEvent.OutputObject
    >;
    ClaimCreated: TypedContractEvent<
      ClaimCreatedEvent.InputTuple,
      ClaimCreatedEvent.OutputTuple,
      ClaimCreatedEvent.OutputObject
    >;
  };
}
